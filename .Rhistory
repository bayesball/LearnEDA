?attr
attr(data, "tsp")
attr(data, "dimnames")
attr(data, "names")
library(lattice)
histogram
str(data)
?str
dimnames(data)
ls()
?str
args(data)
summary(data)
summary
plot.hist <- function(num, y){
print(match.call())
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks,
main=paste("Number of bins =", num))
}
plot.hist(data)
plot.hist(10,data)
?match.call
plot.hist <- function(num, y){
v <- match.call()
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks,
main=paste("Number of bins =", num))
v
}
plot.hist(10,data)
plot.hist(10,data) -> s
str(s)
as.char(s)
as.character(s)
as.character(s)[3]
plot.hist <- function(num, y){
var.name <- as.character(match.call())[3]
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks, xlab=var.name,
main=paste("Number of bins =", num))
}
plot.hist(10, data)
library(LearnEDA)
norm.data <- rnorm(100)
slider.histogram(norm.data)
slider.histogram
slider.histogram <- function(y){
require(manipulate)
plot.hist <- function(num, y, ...){
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks,
main=paste("Number of bins =", num), ...)
}
manipulate(
plot.hist(num, y,
xlab=as.character(match.call())[3]),
num = manipulate::slider(1, 100, initial=2, step=1)
)}
norm.data <- rnorm(200)
slider.histogram(norm.data)
plot.hist
plot.hist <- function(num, y){
var.name <- as.character(match.call())[3]
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks, xlab=var.name,
main=paste("Number of bins =", num))
}
plot.hist
plot.hist(10, norm.data)
slider.histogram <- function(y){
require(manipulate)
plot.hist <- function(num, y){
var.name <- as.character(match.call())[3]
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks, xlab=var.name,
main=paste("Number of bins =", num))
}
manipulate(
plot.hist(num, y),
num = manipulate::slider(1, 100, initial=2, step=1)
)}
slider.histogram(norm.data)
slider.histogram <- function(y){
require(manipulate)
plot.hist <- function(num, y){
var.name <- as.character(match.call())[3]
print(var.name)
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks, xlab=var.name,
main=paste("Number of bins =", num))
}
manipulate(
plot.hist(num, y),
num = manipulate::slider(1, 100, initial=2, step=1)
)}
slider.histogram(norm.data)
slider.histogram <- function(y){
require(manipulate)
plot.hist <- function(num, y, var.name){
var.name <- as.character(match.call())[3]
print(var.name)
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks, xlab=var.name,
main=paste("Number of bins =", num))
}
var.name <- as.character(match.call())[3]
manipulate(
plot.hist(num, y, var.name),
num = manipulate::slider(1, 100, initial=2, step=1)
)}
slider.histogram(norm.data)
slider.histogram <- function(y){
require(manipulate)
plot.hist <- function(num, y, var.name){
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks, xlab=var.name,
main=paste("Number of bins =", num))
}
var.name <- as.character(match.call())[3]
manipulate(
plot.hist(num, y, var.name),
num = manipulate::slider(1, 100, initial=2, step=1)
)}
slider.histogram(norm.data)
slider.histogram <- function(y){
require(manipulate)
plot.hist <- function(num, y, var.name){
print(var.name)
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks, xlab=var.name,
main=paste("Number of bins =", num))
}
var.name <- as.character(match.call())[3]
manipulate(
plot.hist(num, y, var.name),
num = manipulate::slider(1, 100, initial=2, step=1)
)}
slider.histogram(norm.data)
slider.histogram <- function(y){
require(manipulate)
plot.hist <- function(num, y, var.name){
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks, xlab=var.name,
main=paste("Number of bins =", num))
}
var.name <- as.character(match.call())[3]
print(var.name)
manipulate(
plot.hist(num, y, var.name),
num = manipulate::slider(1, 100, initial=2, step=1)
)}
slider.histogram(norm.data)
slider.histogram <- function(y){
require(manipulate)
plot.hist <- function(num, y, var.name){
xrange <- range(y)
breaks <- seq(xrange[1], xrange[2], length = num + 1)
hist(y, breaks=breaks, xlab=var.name,
main=paste("Number of bins =", num))
}
var.name <- as.character(match.call())[2]
print(var.name)
manipulate(
plot.hist(num, y, var.name),
num = manipulate::slider(1, 100, initial=2, step=1)
)}
slider.histogram(norm.data)
library(LearnEDA)
slider.histogram(rnorm(200))
?symplot
symplot(rnorm(100))
symplot(rexp(100))
?spread.level.plot
data(state)
spread.level.plot(state.x77[,"Area"],state.region)
library(sos)
???spreadlevelplot
library(car)
?SpreadLevelPlot
?spreadLevelPlot
spreadLevelPlot(interlocks + 1 ~ nation, data=Ornstein)
library(LearnEDA)
?spreadLevelPlot
library(sos)
???symmetryplot
???symmetry
?rline
?line
?power.t
power.t
?plot2way
temps=matrix(data=c(50,30,35,21,38,
73,58,65,57,63,
88,83,89,84,86,
73,62,68,59,66),nrow=5,ncol=4,
dimnames=list(c("Atlanta","Detroit","Kansas City",
"Minneapolis","Philadelphia"),c("January","April",
"July","October")))
fit=medpolish(temps)
plot2way(fit$row+fit$overall,fit$col,
dimnames(temps)[[1]],dimnames(temps)[[2]])
require(graphics)
## Deaths from sport parachuting;  from ABC of EDA, p.224:
deaths <-
rbind(c(14,15,14),
c( 7, 4, 7),
c( 8, 2,10),
c(15, 9,10),
c( 0, 2, 0))
dimnames(deaths) <- list(c("1-24", "25-74", "75-199", "200++", "NA"),
paste(1973:1975))
deaths
(med.d <- medpolish(deaths))
plot(med.d)
## Check decomposition:
all(deaths ==
med.d$overall + outer(med.d$row,med.d$col, "+") + med.d$residuals)
data(state)
raw=state.x77[,"Population"]
matched.roots=mtrans(raw,0.5)
matched.logs=mtrans(raw,0)
boxplot(data.frame(raw,matched.roots,matched.logs))
lval(rnorm(100))
?han
?half.slope.ratio
?fit.gaussian
# fit Gaussian curve to simulated data from t distribution
data=rt(200,df=5)
bins=pretty(range(data))
g.mean=0
g.sd=1
fit.gaussian(data,bins,g.mean,g.sd)
setwd("~/Dropbox/COURSES/OLD/EDA 2012/2012 COURSE/R")
?pop.change
library(LearnEDA)
?pop.change
library(LearnEDA)
stem.leaf
library(LearnEDA)
library(LearnEDA)
library(LearnEDA)
stem.leaf
library(aplpack)
stem.leaf
install.packages("roxygen2")
library(roxygen2)
library(LearnEDA)
stem.leaf
library(LearnEDA)
stem.leaf
aplpack::stem.leaf
setwd("~/Dropbox/COURSES/OLD/EDA 2012/2012 COURSE/R")
?aplpack:spreadLevelPlot
?aplpack::spreadLevelPlot
?car::spreadLevelPlot
library(LearnEDA)
y <- rnorm(100, 70, 10)
aplpack:stem.leaf(y)
aplpack::stem.leaf(y)
stem(y)
slider.histogram(y)
setwd("~/Dropbox/COURSES/OLD/EDA 2012/2012 COURSE/R")
?legend
library(LearnEDA)
attach(braves.attendance)
d <- data.frame(Game, Attendance)
d
library(LearnEDA)
attach(braves.attendance)
smooth.3R <- smooth(Attendance, kind="3R")
smooth.3RSS <- smooth(Attendance, kind="3RSS")
smooth.3RSSH <- han(smooth.3RSS)
smooth.3RS3R.twice <- smooth(Attendance, kind="3RS3R", twiceit=TRUE)
all.smooth.data <- rbind(
data.frame(Game, Attendance=smooth.3R, Type="3R"),
data.frame(Game, Attendance=smooth.3RSS, Type="3RSS"),
data.frame(Game, Attendance=smooth.3RSSH, Type="3RSSH"),
data.frame(Game, Attendance=smooth.3RS3R.twice, Type="3RS3R.twice")
)
smooth.3R
as.numeric(smooth.3R)
all.smooth.data <- rbind(
data.frame(Game, Attendance=as.numeric(smooth.3R), Type="3R"),
data.frame(Game, Attendance=as.numeric(smooth.3RSS), Type="3RSS"),
data.frame(Game, Attendance=as.numeric(smooth.3RSSH), Type="3RSSH"),
data.frame(Game, Attendance=as.numeric(smooth.3RS3R.twice), Type="3RS3R.twice")
)
library(ggplot2)
ggplot(all.smooth.data, aes(Game, Attendance, color=Type)) +
geom_line() +
facet_wrap(~ Type, ncol=2)
library(ggplot2)
ggplot(all.smooth.data, aes(Game, Attendance, color=Type)) +
geom_line() +
facet_wrap(~ Type, ncol=1)
library(devtools)
devtools::install_github("hadley/dplyr")
install.packages("RMySQL")
library(LearnBayes)
head(studentdata)
cdata <- read.dta("http://www.ats.ucla.edu/stat/data/crime.dta")
summary(cdata)
install.packages("foreign")
library(foreign)
cdata <- read.dta("http://www.ats.ucla.edu/stat/data/crime.dta")
summary(cdata)
summary(ols <- lm(crime ~ poverty + single, data = cdata))
plot(ols)
ls()
head(cdata)
cdata
library(LearnBayes)
library(LearnBayes)
regpost <- function(theta, data){
beta <- theta[1:3]
sigma <- theta[4]
y <- data[, "crime"]
x <- cbind(1, data[, c("poverty", "single")])
sum(dnorm(y, x %*% beta, sigma, log=TRUE)) - log(sigma)
}
coef(ols)
fit <- laplace(regpost, c(-1000, 5, 200), cdata)
bayes.probit
regpost <- function(theta, data){
beta <- array(theta[1:3], 3, 1)
sigma <- theta[4]
y <- data[, "crime"]
x <- cbind(1, data[, c("poverty", "single")])
sum(dnorm(y, x %*% beta, sigma, log=TRUE)) - log(sigma)
}
fit <- laplace(regpost, c(-1000, 5, 200), cdata)
regpost <- function(theta, data){
beta <- array(theta[1:3], 3, 1)
sigma <- theta[4]
y <- data[, "crime"]
x <- as.matrix(cbind(1, data[, c("poverty", "single")]))
sum(dnorm(y, x %*% beta, sigma, log=TRUE)) - log(sigma)
}
fit <- laplace(regpost, c(-1000, 5, 200), cdata)
fit <- laplace(regpost, c(-1000, 5, 200, 5), cdata)
fit
coef(ols)
regpost <- function(theta, data){
beta <- array(theta[1:3], 3, 1)
sigma <- theta[4]
y <- data[, "crime"]
x <- as.matrix(cbind(1, data[, c("poverty", "single")]))
sum(dnorm(y, x %*% beta, sigma, log=TRUE))
}
fit <- laplace(regpost, c(-1000, 5, 200, 5), cdata)
fit$mode
regpost <- function(theta, data){
beta <- array(theta[1:3], 3, 1)
sigma <- theta[4]
y <- data[, "crime"]
x <- as.matrix(cbind(1, data[, c("poverty", "single")]))
sum(dnorm(y, x %*% beta, sigma, log=TRUE))
}
fit <- laplace(regpost, fit$mode, cdata)
fit$mode
summary(ols)
laplace
?laplace
library(LearnBayes)
regpost <- function(theta, data){
beta <- array(theta[1:3], 3, 1)
sigma <- theta[4]
y <- data[, "crime"]
x <- as.matrix(cbind(1, data[, c("poverty", "single")]))
sum(dnorm(y, x %*% beta, sigma, log=TRUE)) - log(sigma)
}
fit <- laplace(regpost, c(-1000, 5, 200, 5), cdata)
fit$mode
fit <- laplace(regpost, fit$mode, cdata)
fit$mode
fit <- laplace(regpost, fit$mode, cdata)
fit$mode
?dcauchy
regpost <- function(theta, data){
beta <- array(theta[1:3], 3, 1)
sigma <- theta[4]
y <- data[, "crime"]
x <- as.matrix(cbind(1, data[, c("poverty", "single")]))
sum(dcauchy(y, x %*% beta, sigma, log=TRUE)) - log(sigma)
}
fit <- laplace(regpost, c(-1000, 5, 200, 5), cdata)
fit <- laplace(regpost, fit$mode, cdata)
fit$mode
pairs(cdata[, c("crime", "poverty", "single")])
library(LearnEDA)
with(homeruns.2000, slider.compare(HOMERUNS, YEARS))
library(LearnEDA)
head(snowfall)
slider.power(snowfall$Snowfall)
snowfall
y <- snowfall[, 4]
str(snowfall)
y <- snowfall[, 3]
y
slider.power(y)
slider.power(rchisq(100,df=4))
library(LearnEDA)
slider.power(rchisq(100,df=4))
slider.power(snowfall$Snowfall)
slider.power(football$winner)
slider.power(braves.at$count)
slider.power(brave.at$count)
slider.power(brave.atendance$count)
slider.power(brave.attendance$count)
slider.power(braves.attendance$count)
head(braves.attaendance)
head(braves.attendance)
slider.power(braves.attendance$Attendance)
library(LearnEDA)
q()
install.packages("vcd")
install.packages("aplpack")
install.packages("car")
library(LearnEDA)
slider.power(rgamma(200, 4, 1))
library(LearnEDA)
slider.power(rgamma(200, 4, 1))
library(LearnEDA)
slider.power(rgamma(200, 4, 1))
slider.histogram(rgamma(200, 4, 1))
library(LearnEDA)
with(homeruns.2000, slider.compare(HOMERUNS, YEARS))
library(LearnEDA)
with(homeruns.2000, slider.compare(HOMERUNS, YEARS))
with(homeruns.2000, slider.compare(HOMERUNS, YEARS))
setwd("~/Dropbox/2014 WORK/Runs Expectancy/Final R")
load("pbp2013.Rdata")
d.inning <- subset(d2013, LEADOFF_FL==TRUE)
library(dplyr)
S <- summarize(group_by(d.inning, BAT_TEAM),
Estimate=mean(RUNS.ROI),
N=length(RUNS.ROI),
SE=sd(RUNS.ROI) / sqrt(length(RUNS.ROI)))
source("shrink.R")
Fit <- shrink(S)
Fit
median(S$shrinkage)
median(Fit$shrinkage)
log10(100000)
log10(1650)
install.packages("LearnEDA")
library(LearnEDA)
detach("package:LearnEDA", unload=TRUE)
setwd("~/Dropbox/COURSES/EDA 2014/WORK/2.2 SUMMARIES")
?stangle
?Stangle
Stangle("summaries.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/3.1 BOXPLOTS")
Stangle("boxplots.Rnw")
Stangle("boxplots.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/3.2 SPREAD LEVEL PLOT")
Stangle("spreadlevel.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/3.3 COMPARING 3")
Stangle("comparing3.Rnw")
Stangle("comparing3.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/4.1 TRANSFORMATIOS")
Stangle("transformations.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/4.2 SYMMETRY")
Stangle("symmetry.Rnw")
Stangle("symmetry.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/4.3 SYMMETRY 2")
Stangle("symmetry2.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/4.4 SYMMETRY 3")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/5.1 PLOTTING")
Stangle("plotting2.Rnw")
Stangle("plotting1.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/5.2 RESISTANT LINE")
Stangle("rline.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/5.3 POPULATION II")
Stangle("popgrowth.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/5.4 STRAIGHTENING")
Stangle("straighten.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/5.5 Smoothing")
Stangle("smooth.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/6.1 MEDIAN POLISH")
Stangle("mpolish.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/6.2 PLOTTING ADDITIVE FIT")
Stangle("plot2wayfit.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/6.3 MULT FIT")
Stangle("multfit.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/6.4 EXTFIT")
Stangle("extended.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/7.1 ROOTOGRAM")
Stangle("rootogram.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/7.3 SYMMETRIC CURVE")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/7.4 FRACTIONS")
Stangle("fraction.Rnw")
setwd("~/Dropbox/COURSES/EDA 2014/WORK/INTRODUCTION")
Stangle("introeda.Rnw")
install.packages("BradleyTerry2")
install.packages("Matrix", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("car", lib="~/Library/R/3.1/library")
install.packages("~/Dropbox/R, LANGUAGES/R PACKAGES/LearnEDA_1.4/LearnEDA_1.4.tar.gz", repos = NULL, type = "source")
install.packages("car")
install.packages("~/Dropbox/R, LANGUAGES/R PACKAGES/LearnEDA_1.4/LearnEDA_1.4.tar.gz", repos = NULL, type = "source")
